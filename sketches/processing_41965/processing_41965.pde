
//Homework 10
//Copyright Kristen McConnell, October 2011
//Pittsburgh, PA 15221 

color col, col2;

void setup()
{
  size(550,550,P3D);
  col = color(255,192,203);
  col2 = color(178,34,34);  
}

void draw()
{
  prepScreen();
  M();
}

void M()
{
  fill(col);
  //rotateX(radians(-90));
  rotateY(radians(30));
  
  //Left Side of M -- Box
  pushMatrix();
  {
    translate(width*-.2,0,0);
    box(width*.1,height*.5,width*.1);
  }
  popMatrix();
  
  //Left Side of M, Bottom --Spheres
  fill(col2);
  pushMatrix();
  {
    translate(width*-.25,height*.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.2,height*.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.15,height*.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
    pushMatrix();
  {
    translate(width*-.25,height*.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.2,height*.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.15,height*.27,0);
    sphere(width*.02);
  }
  popMatrix();
    pushMatrix();
  {
    translate(width*-.25,height*.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.2,height*.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.15,height*.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  //Left Side of the M, Top --Spheres
  pushMatrix();
  {
    translate(width*-.25,height*-.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.2,height*-.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.15,height*-.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
    pushMatrix();
  {
    translate(width*-.25,height*-.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.2,height*-.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.15,height*-.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.25,height*-.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.2,height*-.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.15,height*-.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  
  //Right Side of M -- Box
  fill(col);
  pushMatrix();
  {
    translate(width*.2,0,0);
    box(width*.1,height*.5,width*.1);
  }
  popMatrix();
  
  //Right Side of M, Bottom --Spheres
  fill(col2);
  pushMatrix();
  {
    translate(width*.25,height*.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.2,height*.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.15,height*.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.25,height*.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.2,height*.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.15,height*.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.25,height*.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.2,height*.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.15,height*.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  
  //Right Side of the M, Top --Spheres
  pushMatrix();
  {
    translate(width*.25,height*-.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.2,height*-.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.15,height*-.27,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.25,height*-.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.2,height*-.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.15,height*-.27,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.25,height*-.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.2,height*-.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.15,height*-.27,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  
  //Middle Row of Spheres
  fill(col2);
  pushMatrix();
  {
    translate(0,0,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(0,0,width*0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(0,0,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  
  //Right Slant of M
  pushMatrix();
  {
    translate(width*.025,height*-.035,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.025,height*-.035,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.025,height*-.035,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.05,height*-.07,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.05,height*-.07,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.05,height*-.07,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.075,height*-.105,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.075,height*-.105,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.075,height*-.105,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.1,height*-.14,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.1,height*-.14,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.1,height*-.14,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.125,height*-.175,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.125,height*-.175,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*.125,height*-.175,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  
  //Left Slant of M
  pushMatrix();
  {
    translate(width*-.025,height*-.035,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.025,height*-.035,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.025,height*-.035,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.05,height*-.07,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.05,height*-.07,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.05,height*-.07,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.075,height*-.105,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.075,height*-.105,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.075,height*-.105,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.1,height*-.14,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.1,height*-.14,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.1,height*-.14,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.125,height*-.175,width*.04);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.125,height*-.175,0);
    sphere(width*.02);
  }
  popMatrix();
  pushMatrix();
  {
    translate(width*-.125,height*-.175,width*-.04);
    sphere(width*.02);
  }
  popMatrix();
}

void prepScreen()
{
  background(255);
  translate(width/2,height/2,0);
}

