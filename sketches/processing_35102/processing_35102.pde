
// Visualise the distribution of numbers generated by the random() function in Processing
// Generate a number between 1 and 20 and plot a histogram of occurrences.
// Plot a horizontal line showing the lowest and highest counts and expected mean value

int[] hits = new int[100];
PFont myFont;
int   maxValue = 30;
int   trials = 0;
int   barWidth = 20;
int   leftMargin = 10;
int   botMargin = 20;
int   rowSize = 3;

void draw() {
  int x1, x2, y1, y2, minH, maxH, y;
  background(255);
  int r = int(random(maxValue)); 
  
  hits[r] += 1;
  trials += 1;
  fill(190,0,0);
  stroke(255);
  minH = hits[0];
  maxH = 0;
  textFont(myFont);
  for (int i=0; i<maxValue; i++) {
    x1 = leftMargin + i*barWidth;
    x2 = x1 + barWidth;
    if (hits[i] > maxH) {
        maxH = hits[i];
    }
    if (hits[i] < minH) {
        minH = hits[i];
    }
    
    if (hits[i] > 0) {
      rect(leftMargin + i*barWidth,
           height - botMargin - hits[i]*rowSize,
           barWidth,
           hits[i]*rowSize);
      text(hits[i], 5 + leftMargin + i*barWidth, height - botMargin - hits[i]*rowSize - 10);
    }
    text(trials, width/2, height - 4 );
  }
  // plot horizontal lines showing minimum and maximum values and the expected number
  stroke(0, 0, 200);
  y = height - botMargin - minH*rowSize;
  line(leftMargin, y, width - leftMargin, y );
  y = height - botMargin - maxH*rowSize;
  line(leftMargin, y, width - leftMargin, y );
  y = height - botMargin - (trials / maxValue) *rowSize;
  line(leftMargin, y, width - leftMargin, y );
  
  // if the maximum number of occurrences has reached the top of the diagram
  // reset the counters and start again
  if (maxH > (height - botMargin * 2)/rowSize) {
     trials = 0;
     for (int i=0; i<maxValue; i++) {
      hits[i] = 0;
    }
  } 
}

void setup() {
  myFont = createFont("Arial", 11, true);
  size(maxValue*barWidth + 2*leftMargin, 600);
  for (int i=0; i<maxValue; i++) {
    hits[i] = 0;
  }
  frameRate(30); 
  background(255);
}


