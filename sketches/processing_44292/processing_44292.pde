
 /* 
   Model Experiments
   Generative Drawing Machine based on  physics 
   
   Natalia Monroy-Lopez
   Master of Digital Design
   University of Canberra
   
   */

import traer.physics.*; // Traer physics library 

ParticleSystem physics; // The physics system
Particle p;              // The particles within the system
Particle q;
Particle r;
Particle s;
Particle attractor, attractor2;    // The particles in the system that will act as magnets
Spring spring;                   // The system's springs 

float strength = 0.8;        // the value for the springs' strenght 
float len = 50.5;             //the value for the springs' length
float dam = 0.5;            //the value for the springs' damping 
float attraction = 1000;    //the value for the attraction between particles

void setup() {
  size(1280,720);     // size of screen
    smooth();        //smooth drawing
  physics = new ParticleSystem( 0.03, 0.03, 0.03, 0.03 );  // making a new particle system and setting its gravity on x, y and z plus its drag value
  physics.setGravity(0.05);   // setting the system's gravity value
  att();                       // calling the method that draws the attraction particles
  background(244, 244, 232);   // setting the background colour
  strokeWeight(1.5);          // the thickness of the stroke set to 1.5 px
  cursor( CROSS );            // making the mouse as cross for better drawing interaction
}


void draw() {
  // background(255);
  //stroke(100, 50);
  //  fill(0);
  physics.tick(); // runs the particle system simulation

  int spr =  physics.numberOfSprings(); // number of springs
  for (int s=0; s < spr; s++) {         // a for loop to generate multiple springs
    Spring S = physics.getSpring(s);   ////  Spring S is equal to the amount of springs generated by the loop
    Particle p1 = S.getOneEnd();       // p1 is the particle that is at starting end of the spring
    Particle p2 = S.getTheOtherEnd(); // p2 is the particle that is at the other end of the spring
          stroke(random(100*s), random(0,50));   // stroke colour with random transparency
      //   strokeWeight(1*s);   //random stroke colour
    line(mouseX, mouseY,p1.position().x(),p1.position().y() );  // a line drawn from the position of the mouse and p1, p2
  }

  int part = physics.numberOfParticles(); // number of particles in the system

  for (int p=0; p < part; p++) {     //// a for loop to generate multiple particles
    Particle P = physics.getParticle(p);  // get the particles out
 //  ellipse(P.position().x(),P.position().y(),10,10);
    if (P.position().x() > width ||  P.position().x()<0 ||P.position().y() > height || P.position().y() < 0) { // bounce off the bottom and sides
      P.position().set( P.position().x(), height, 0);   // resets the position of the particles
      P.velocity().set( P.velocity().x(), P.velocity().y()*-1,0  );  // resets the velocity of the particles
    }
  }
}

void keyPressed() {   //key pressed
  if (key == 'a') {   //  if 'a' is pressed run the following statement 
    att();            // create attractor particles
  }
  else if (key == 'c') {   // but also if 'c' is pressed run the following statement 
    physics.clear();      // clear the particle system
  }
}

void mousePressed() {   // when mouse is pressed run the following
  len = random(0, 2);    // randomise the lenght of the springs
  dam = random(0.5,1.0);  // randomise the damping of the springs
  stroke(100, 50);       //stroke colour for the ellipse
  noFill();              // no fill for the ellipse
  ellipse(mouseX, mouseY,  50,  50);  // draw an ellipse at the mouse position 
  makeBox();   // and make another line
}

void att () {  // attractors
  attractor = physics.makeParticle(10,random(width),random(height),0);  //makes the attractor particle with mass and at a random position 
  attractor2 = physics.makeParticle(10,random(width),random(height),0);  //makes attractor particle #2
  attractor.makeFixed();   // fixes the particle to a given location
  attractor2.makeFixed(); 

  stroke(100, 50);  //stroke colour
  noFill();        //turns the fill off
  ellipse(attractor.position().x(), attractor.position().y(), 20, 20);  //draws an ellipse at the position of the attractor particle
  ellipse(attractor2.position().x(), attractor2.position().y(), 20, 20); //draws an ellipse at the position of the attractor particle#2


}

  void makeBox() {                      //makes a box by drawing the 4 different particles and springs 
  p = physics.makeParticle( 2, mouseX,mouseY, 0 );
  q = physics.makeParticle( 2,mouseX,mouseY, 0 ); // particle 2
  r = physics.makeParticle( 2, mouseX,mouseY, 0 ); // particle 2
  s = physics.makeParticle( 2, mouseX,mouseY, 0 ); // particle 2

  physics.makeAttraction( attractor, p, attraction, 20 );  // makes an attraction between particles and attractor
  physics.makeAttraction( attractor, q, attraction, 20 );
  physics.makeAttraction( attractor, r, attraction, 20 );
  physics.makeAttraction( attractor, s, attraction, 20 );

  physics.makeAttraction( attractor2, p, attraction, 20 );  // makes an attraction between particles and attractor2
  physics.makeAttraction( attractor2, q, attraction, 20 );
  physics.makeAttraction( attractor2, r, attraction, 20 );
  physics.makeAttraction( attractor2, s, attraction, 20 );
  

  // Spring makeSpring( Particle a, Particle b, float strength, float damping, float restLength );
    spring = physics.makeSpring(p,q, strength, dam,len);   // makes the spring between the two particles with the above stated values for strength, damping and lenght
  spring = physics.makeSpring(q,r, strength, dam,len);
  spring = physics.makeSpring(r,p, strength, dam,len);
  spring = physics.makeSpring(q,s, strength, dam,len);
  spring = physics.makeSpring(s,r, strength, dam,len);
  spring = physics.makeSpring(s,p, strength, dam,len);
}



