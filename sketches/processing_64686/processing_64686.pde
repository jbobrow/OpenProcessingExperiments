
/*Alcys_Pissenlit102
 *fait par Jacques Maire
 *le mardi 26 juin 2012
 *
 *Les coordonnées des points répartis sue la sphere sont ici:
 *http://neilsloane.com/icosahedral.codes/index.html
 * Merci donc à Niels Loane qui fait un travail aussi génial qu'utile
 *Tandis que les graines de pissenlit se passent  de nos mathématiques pour utiliser
 *au mieux l'espace de la sphere et le vent de l' atmossphere.
 */
import remixlab.proscene.*;

Scene scene;
Fleur fleur;
float temps,r;
Brin brin;
PVector[] vecteurs;

float[] coord = {
  0.583128783852, 
  0.748783450574, 
  0.315093899640, 
  0.525731112119, 
  0.850650808352, 
  0.000000000000, 
  0.000000000000, 
  0.525731112119, 
  -0.850650808352, 
  -0.525731112119, 
  0.850650808352, 
  0.000000000000, 
  0.000000000000, 
  0.525731112119, 
  0.850650808352, 
  0.850650808352, 
  -0.000000000000, 
  0.525731112119, 
  -0.850650808352, 
  -0.000000000000, 
  0.525731112119, 
  -0.000000000000, 
  -0.525731112119, 
  0.850650808352, 
  -0.850650808352, 
  -0.000000000000, 
  -0.525731112119, 
  -0.525731112119, 
  -0.850650808352, 
  0.000000000000, 
  0.850650808352, 
  -0.000000000000, 
  -0.525731112119, 
  0.525731112119, 
  -0.850650808352, 
  0.000000000000, 
  0.000000000000, 
  -0.525731112119, 
  -0.850650808352, 
  1.000000000000, 
  0.000000000000, 
  0.000000000000, 
  -0.500000000000, 
  -0.309016994375, 
  -0.809016994375, 
  -1.000000000000, 
  0.000000000000, 
  0.000000000000, 
  0.500000000000, 
  -0.309016994375, 
  0.809016994375, 
  0.500000000000, 
  0.309016994375, 
  -0.809016994375, 
  -0.500000000000, 
  0.309016994375, 
  -0.809016994375, 
  -0.500000000000, 
  -0.309016994375, 
  0.809016994375, 
  0.809016994375, 
  -0.500000000000, 
  -0.309016994375, 
  -0.309016994375, 
  -0.809016994375, 
  0.500000000000, 
  -0.309016994375, 
  0.809016994375, 
  -0.500000000000, 
  -0.809016994375, 
  0.500000000000, 
  0.309016994375, 
  0.000000000000, 
  -1.000000000000, 
  0.000000000000, 
  0.809016994375, 
  0.500000000000, 
  -0.309016994375, 
  -0.000000000000, 
  1.000000000000, 
  0.000000000000, 
  -0.809016994375, 
  -0.500000000000, 
  0.309016994375, 
  0.809016994375, 
  0.500000000000, 
  0.309016994375, 
  0.309016994375, 
  0.809016994375, 
  -0.500000000000, 
  -0.309016994375, 
  -0.809016994375, 
  -0.500000000000, 
  0.000000000000, 
  -0.000000000000, 
  1.000000000000, 
  0.309016994375, 
  0.809016994375, 
  0.500000000000, 
  0.000000000000, 
  0.000000000000, 
  -1.000000000000, 
  0.309016994375, 
  -0.809016994375, 
  0.500000000000, 
  -0.309016994375, 
  0.809016994375, 
  0.500000000000, 
  0.309016994375, 
  -0.809016994375, 
  -0.500000000000, 
  -0.809016994375, 
  0.500000000000, 
  -0.309016994375, 
  -0.809016994375, 
  -0.500000000000, 
  -0.309016994375, 
  0.809016994375, 
  -0.500000000000, 
  0.309016994375, 
  0.500000000000, 
  0.309016994375, 
  0.809016994375, 
  0.500000000000, 
  -0.309016994375, 
  -0.809016994375, 
  -0.500000000000, 
  0.309016994375, 
  0.809016994375, 
  0.194738739041, 
  0.268034882681, 
  -0.943522191145, 
  -0.583128783852, 
  0.748783450574, 
  -0.315093899640, 
  -0.194738739041, 
  0.268034882681, 
  0.943522191145, 
  0.777867522893, 
  0.628428290920, 
  -0.000000000946, 
  -0.268034883627, 
  0.943522190560, 
  -0.194738740571, 
  -0.315093900225, 
  0.583128782321, 
  0.748783451520, 
  0.748783451520, 
  -0.315093900225, 
  0.583128782321, 
  -0.943522190560, 
  -0.194738740571, 
  0.268034883627, 
  0.583128782321, 
  0.748783451520, 
  -0.315093900225, 
  -0.000000000946, 
  0.777867522893, 
  0.628428290920, 
  -0.315093899640, 
  -0.583128783852, 
  0.748783450574, 
  0.943522191145, 
  -0.194738739041, 
  0.268034882681, 
  0.315093899640, 
  0.583128783852, 
  0.748783450574, 
  -0.194738740571, 
  -0.268034883627, 
  0.943522190560, 
  0.194738740571, 
  0.268034883627, 
  0.943522190560, 
  -0.268034882681, 
  0.943522191145, 
  0.194738739041, 
  -0.628428290920, 
  -0.000000000946, 
  -0.777867522893, 
  -0.748783450574, 
  -0.315093899640, 
  0.583128783852, 
  -0.583128782321, 
  0.748783451520, 
  0.315093900225, 
  -0.748783450574, 
  0.315093899640, 
  -0.583128783852, 
  -0.268034882681, 
  -0.943522191145, 
  -0.194738739041, 
  0.628428290920, 
  -0.000000000946, 
  0.777867522893, 
  0.748783450574, 
  -0.315093899640, 
  -0.583128783852, 
  0.268034882681, 
  0.943522191145, 
  -0.194738739041, 
  0.748783450574, 
  0.315093899640, 
  0.583128783852, 
  0.943522190560, 
  -0.194738740571, 
  -0.268034883627, 
  -0.194738740571, 
  0.268034883627, 
  -0.943522190560, 
  0.268034882681, 
  -0.943522191145, 
  0.194738739041, 
  -0.943522191145, 
  0.194738739041, 
  0.268034882681, 
  0.000000000946, 
  -0.777867522893, 
  0.628428290920, 
  -0.748783451520, 
  0.315093900225, 
  0.583128782321, 
  -0.583128782321, 
  -0.748783451520, 
  -0.315093900225, 
  0.315093900225, 
  -0.583128782321, 
  0.748783451520, 
  -0.628428290920, 
  0.000000000946, 
  0.777867522893, 
  0.268034883627, 
  -0.943522190560, 
  -0.194738740571, 
  0.943522190560, 
  0.194738740571, 
  0.268034883627, 
  0.194738739041, 
  -0.268034882681, 
  0.943522191145, 
  0.628428290920, 
  0.000000000946, 
  -0.777867522893, 
  -0.777867522893, 
  -0.628428290920, 
  -0.000000000946, 
  0.583128782321, 
  -0.748783451520, 
  0.315093900225, 
  -0.315093900225, 
  -0.583128782321, 
  -0.748783451520, 
  0.315093900225, 
  0.583128782321, 
  -0.748783451520, 
  -0.748783451520, 
  -0.315093900225, 
  -0.583128782321, 
  -0.777867522893, 
  0.628428290920, 
  0.000000000946, 
  0.000000000946, 
  0.777867522893, 
  -0.628428290920, 
  0.315093899640, 
  -0.583128783852, 
  -0.748783450574, 
  -0.943522191145, 
  -0.194738739041, 
  -0.268034882681, 
  -0.315093899640, 
  0.583128783852, 
  -0.748783450574, 
  0.943522191145, 
  0.194738739041, 
  -0.268034882681, 
  -0.000000000946, 
  -0.777867522893, 
  -0.628428290920, 
  0.748783451520, 
  0.315093900225, 
  -0.583128782321, 
  -0.943522190560, 
  0.194738740571, 
  -0.268034883627, 
  0.194738740571, 
  -0.268034883627, 
  -0.943522190560, 
  0.583128783852, 
  -0.748783450574, 
  -0.315093899640, 
  -0.583128783852, 
  -0.748783450574, 
  0.315093899640, 
  -0.268034883627, 
  -0.943522190560, 
  0.194738740571, 
  0.268034883627, 
  0.943522190560, 
  0.194738740571, 
  -0.194738739041, 
  -0.268034882681, 
  -0.943522191145, 
  0.777867522893, 
  -0.628428290920, 
  0.000000000946
};


void setup() {
  size(900, 800, P3D);
  frameRate(40);
  scene=new Scene(this);
  scene.setGridIsDrawn(false);
  scene.setAxisIsDrawn(false);
    r=200;
    int j=0;
  vecteurs=new PVector[102];
  for (int k=0;k<102; k++) {
    vecteurs[k]=new PVector(coord[j]*r, coord[j+1]*r, coord[j+2]*r);
    j+=3;
  }

  tri();
  fleur=new Fleur(this);
  brin=new Brin(new PVector(0, 0, -4000));
scene.camera().setPosition(new PVector(9999,9999,800));
scene.camera().setOrientation(new Quaternion(new PVector(0.81433,0.34013,-0.47029),4.3869));
  scene.camera().lookAt( scene.camera().sceneCenter() );
  scene.camera().addKeyFrameToPath(1);

  scene.camera().setPosition(new PVector(9999,-9999,800));
 scene.camera().setOrientation(new Quaternion(new PVector(-0.85064,0.366798,-0.37664),1.694614)); 
  scene.camera().lookAt( scene.camera().sceneCenter() );
  scene.camera().addKeyFrameToPath(1);

  scene.camera().setPosition(new PVector(-9999,-9999,800));
scene.camera().setOrientation(new Quaternion(new PVector(-0.25958,0.67225,-0.6933),2.602166)); 
  scene.camera().lookAt( scene.camera().sceneCenter() );
  scene.camera().addKeyFrameToPath(1);

  scene.camera().setPosition(new PVector(-9999,0,800));
 scene.camera().setOrientation(new Quaternion(new PVector(0.34438,0.53373,-0.772356),3.630056));
  scene.camera().lookAt( scene.camera().sceneCenter() );
  scene.camera().addKeyFrameToPath(1);
  
 scene.camera().setPosition(new PVector(-9999,9999,800));
 scene.camera().setOrientation(new Quaternion(new PVector(0.34438,0.53373,-0.772356),3.630056));
  scene.camera().lookAt( scene.camera().sceneCenter() );
  scene.camera().addKeyFrameToPath(1);




        scene.camera().playPath(1);


  //re-position the camera:
  scene.camera().setPosition(new PVector(-9999,9999,800));
// scene.camera().setOrientation(new Quaternion(new PVector(0,0,1),new PVector(6,-6,-20)));
  scene.camera().lookAt( scene.camera().sceneCenter() );
 // scene.showAll();
scene.setCameraPathsAreDrawn(false);
 scene.camera().keyFrameInterpolator(1).setInterpolationSpeed(0.12);
 scene.camera().keyFrameInterpolator(1).setLoopInterpolation(true);
}

void draw() {
  background(170,50, 255);
  directionalLight(255, 255, 0, 0, -1, -1);
  directionalLight(0, 0, 255, -1, 0, -1);
  directionalLight(0, 0, 255, -1, 0, 1);
  directionalLight(255, 0, 0, 1, 1, -1);
  stroke(0);
  temps+=0.18;
  int tem=round(min(102,temps*4));
  PVector posi=brin.dessineBrin();
  fleur.dessineFleur(tem, posi);
if((tem>=101) && (fleur.graines[101].kfi.frame().position().z<-3979)) reset();
}

void reset(){
for (int k=0;k<102; k++) {
 fleur.graines[k].kfi.resetInterpolation();
  temps=0;
    fleur.graines[k].enmarche=false;
}

}



PVector comb(float t1, PVector v1, float t2, PVector v2) {
  PVector res=PVector.add(PVector.mult(v1, t1), PVector.mult(v2, t2));
  return res;
}

void ligne(PVector u, PVector v) { 
  stroke(0, 0, 255);   

  line(u.x, u.y, u.z, v.x, v.y, v.z);
}

void tri() {
  boolean  aucun_echange=false;
  PVector v;
  while (!aucun_echange) {
    aucun_echange=true;
    for (int j=0;j<101;j++) {
      if (vecteurs[j].z<vecteurs[j+1].z) {
        v=vecteurs[j];
        vecteurs[j]=vecteurs[j+1].get();
        vecteurs[j+1]=v.get();
        aucun_echange=false;
      }
    }
  }
}



