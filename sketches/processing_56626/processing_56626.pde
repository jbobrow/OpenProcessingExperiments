
//----------------------
// by Danko 2012
//----------------------

int n = 5; //NÃºmero de Marios
int[] posX = new int[n];
int[] posY = new int[n]; 
float[] velX = new float[n];
float[] velY = new float[n];

int w = 12;
int h = 16;
int l = 5;
int amplada, alcada;


void setup() 
{
  amplada = 450;
  alcada = 450;
  size(amplada, alcada);
  background(255);
  smooth();

  noStroke();
  fill(255, 0, 0);

  for (int i = 0; i<n; i++)
  {
    posX[i] = amplada/2;
    posY[i] = alcada/2;
    velX[i] = random(-4, 4);
    velY[i] = random(-4, 4);
  }
}

void draw()
{

  background(255);
  draw2();
  mou();
}

void draw2() 
{
  fill(255,0,0);
  noStroke();
  for (int i = 0; i<n; i++) 
  SuperMario(posX[i], posY[i]);
}


void SuperMario(int a, int b) 
{
  
  int[] vermell = 
  {
    0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  };
 
  int[] negre = 
  {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 
    0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
    0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,
    1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,
    1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
  };

  int[] carn = 
  {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 
    0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 
    0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 
    1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
    1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  };

  fill(255,0,0);
  int index=0;
  for (int j = 0; j<h; j++) 
  {
    for (int i = 0; i<w; i++)
    {
      if(vermell[index]==1)
        rect(a+i*l,b+j*l,l,l);
      index++;
     }
  }
  fill(90,90,90);   
  index=0;
  for (int k = 0; k<h;k++)
  {
    for (int m = 0; m<w; m++) 
    {
      if(negre[index]==1)
        rect(a+m*l,b+k*l,l,l);
      index++;
    }
  }
   fill(250,190,0);   
  index=0;
  for (int d = 0; d<h;d++)
  {
    for (int p = 0; p<w; p++) 
    {
      if(carn[index]==1)
        rect(a+p*l,b+d*l,l,l);
      index++;
    }
  }

}

void mou() 
{

  for (int i = 0; i<n; i++) 
  {
    posX[i] += velX[i];
    posY[i] += velY[i];

    if (posX[i] <= 0)
    {
      posX[i] = 0;
      velX[i] = -velX[i];
    }
    if (posX[i] >= amplada - w*l) 
    {
      posX[i] = amplada - w*l;
      velX[i] = -velX[i];
    }
    if (posY[i] <= 0) 
    {
      posY[i] = 0;
      velY[i] = -velY[i];
    }
    if (posY[i] >= alcada - h*l) 
    {
      posY[i] = alcada - h*l;
      velY[i] = -velY[i];
    }
  }
}
